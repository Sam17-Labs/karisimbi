import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import axios from "axios";
import { gql, useQuery } from "@apollo/client";
import { curve } from '@futuretense/curve25519-elliptic';
import { PRE } from "@futuretense/proxy-reencryption";
import { useRouter } from 'next/router';

let pre;

export default function Home() {
  const [keys, setKeys] = useState();
  const [user, setUser] = useState();
  const [files, setFiles] = useState([]);
  const router = useRouter();
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState();
  const [shareAddress, setShareAddress] = useState();
  if (keys) {
    pre = new PRE(keys.privateKey.toBuffer(), curve);
  }
   
  const getUserByPublicKeyQuery = gql`
    query getUserByPublicKey($publicKey: String = "") {
      users(where: {publicKey: {_eq: $publicKey}}) {
        id
        publicKey
        username
      }
    }  
  `
  
  const { data: usersQueryData, 
    loading: usersQueryLoading, 
    error:UsersQueryError } = useQuery(getUserByPublicKeyQuery, {
      variables: {
        publicKey: (keys) ? Buffer.from(keys?.publicKey).toString("base64") : ""
      }
    });

  const getFilesById = gql`
    query getfilesById($owner: uuid = "") {
      files(where: {owner: {_eq: $owner}}) {
        createdAt
        fileMimeType
        description
        fileName
        id
        owner
        s3Url
        updatedAt
      }
    }`
  
  const { data: filesQueryData, 
    loading: filesQueryLoading, 
    error: filesQueryError } = useQuery(getFilesById, {
      variables: {
        owner: user?.id
      }
    });
    
  useEffect(() => {
    if(window != undefined){
      const privateKeyBase64= window.localStorage.getItem("privateKey");
      if(privateKeyBase64 && !keys){
        const privateKey = curve.scalarFromBuffer(Buffer.from(privateKeyBase64, "base64"));
        const publicKey = curve.basepoint.mul(privateKey).toBuffer();
        setKeys({publicKey, privateKey});
      } else if (!privateKeyBase64){
        router.push('/account');
      }
    }
  }, [keys, router]);

  useEffect(() => {
    if(usersQueryData){
      setUser(usersQueryData.users[0]);
    }
  }, [usersQueryData]);

  useEffect(() => {
    if(filesQueryData){
      setFiles(filesQueryData.files);
    }
  }, [filesQueryData, filesQueryError]);

  const download = async(file) => {
    const { data: cipherFile } = await axios({
      method: "GET",
      url: file.s3Url
    });

    console.log(cipherFile);

    pre = new PRE(keys.privateKey.toBuffer(), curve);

    for (const attribute of Object.keys(cipherFile)) {
      const attributeDataArr = Buffer.from(cipherFile[attribute].data);
      cipherFile[attribute]= attributeDataArr;      
    }

    const plainFile = await pre.selfDecrypt(cipherFile);
    const type = file.fileMimeType.split("/")[0];
    const blob = new Blob([plainFile], { type});
    const blobUrl = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.download = file.fileName || Math.random();
    a.href = blobUrl;
    a.click();
    URL.revokeObjectURL(blob);
  }
  
  const openShareModal = (file) => {
    setIsShareModalOpen(true);
    setSelectedFile(file);
    console.log(file);
  }

  const closeShareModel = () => {
    setIsShareModalOpen(false);
    setSelectedFile({});
    setShareAddress();
  }

  const shareFile = async() => {
    if(shareAddress){
      const tag = Buffer.from('TAG');
      const shareAddressBuffer = Buffer.from(shareAddress, "base64");
      const reEncryptionKey = pre.generateReKey(shareAddressBuffer, tag);
      console.log("selectedFile:", selectedFile);
      let { data } = await axios.post("/api/share", {
        file: selectedFile,
        reEncryptionKey: reEncryptionKey,
        shareAddress: shareAddressBuffer
      });

      // console.log(data);
    }
  }

  console.log(isShareModalOpen);

  return (
    <div className={styles.container}>
      <Head>
        <title>Karisimbi Portal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Karisimbi Portal
        </h1>

        <div className={styles.grid}>
          <Link href="/account">
            <a className={styles.card}>
              <h2>Profile &rarr;</h2>
              <p>Generate or view security keys.</p>
            </a>
          </Link>
          
          <Link  href="/upload">
            <a className={styles.card}>
              <h2>Upload file &rarr;</h2>
              <p>Upload and encrypt files on s3.</p>
            </a>
          </Link>
        </div>
        <table className="table-fixed">
          <thead>
            <tr>
              <th>Id</th>
              <th>Owner</th>
              <th>File name</th>
              <th>File type</th>
              <th>Description</th>
              <th>S3 URL</th>
              <th>Created at</th>
              <th>Updated at</th>
            </tr>
          </thead>
          <tbody>
            {files.map(
              (file) =>
                <tr key={file.id}>
                <td>{file.id}</td>
                <td>{file.owner}</td>
                <td onClick={() => download(file)}>{file.fileName}</td>
                <td>{file.fileMimeType}</td>
                <td>{file.description}</td>
                <td>{file.s3Url}</td>
                <td>{file.createdAt}</td>
                <td>{file.updatedAt}</td>
                <td>
                  <button className="bg-pink-500 text-white active:bg-pink-600 font-bold uppercase text-sm px-6 py-3 rounded \
                  shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" 
                  type="button" onClick={() => openShareModal(file)}>
                    Share
                  </button>
                </td>
              </tr>
            )}
          </tbody>
        </table>
        {(isShareModalOpen) ? (
          <>
            <div className=" overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none justify-center items-center" id="modal-id">
              <div className="relative w-auto my-6 mx-auto max-w-3xl">
                <div className="border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none">
                  <div className="flex items-start justify-between p-5 border-b border-solid border-slate-200 rounded-t">
                    <h3 className="text-3xl font-semibold  text-black">
                      Share file
                    </h3>
                    <button className="p-1 ml-auto bg-transparent border text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none" onClick={() => closeShareModel()}>
                      <span className="bg-transparent text-black h-6 w-6 text-2xl block outline-none focus:outline-none">
                        Ã—
                      </span>
                    </button>
                  </div>
                  <div className="relative p-6 flex-auto">
                    <p className="my-4 text-black leading-relaxed">
                      {"File: " + selectedFile.fileName}
                    </p>
                    <label htmlFor="address" className="text-black">Address: </label>
                    <input type="text" id="address" name="address" className="border border-black bg-white text-black" onChange={(e) => setShareAddress(e.target.value)}></input>
                  </div>
                  <div className="flex items-center justify-end p-6 border-t border-solid border-slate-200 rounded-b">
                    <button className="text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none \
                     focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" onClick={() => closeShareModel()}>
                      Close
                    </button>
                    <button className="bg-emerald-500 text-white active:bg-emerald-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" onClick={shareFile}>
                      Share
                    </button>
                  </div>
                </div>
              </div>
            </div>
          <div className="hidden opacity-25 fixed inset-0 z-40 bg-black" id="modal-id-backdrop"></div>
        </>
        ):(<> </>)}
        
{/* <script type="text/javascript">
  function toggleModal(modalID){
    document.getElementById(modalID).classList.toggle("hidden");
    document.getElementById(modalID + "-backdrop").classList.toggle("hidden");
    document.getElementById(modalID).classList.toggle("flex");
    document.getElementById(modalID + "-backdrop").classList.toggle("flex");
  }
</script> */}
      </main>

      <footer className={styles.footer}>
          Powered by {'   '}
          <span className={styles.title}>
            Sam 17
          </span>
      </footer>
    </div>
  )
}
